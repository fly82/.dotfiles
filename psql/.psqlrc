\set QUIET 1

--------------------------------------------------------------------------------
-- Prompts
-- Prompt1 / Prompt2 / Prompt3
-- %M : server
-- %m : host name
-- %> : port
-- %n : user
-- %/ : current database
-- %~ : like %/ but ~ for default database
-- %# : '#' if superuser, '>' otherwise
-- %R
-- %x
-- %[...%] : terminal control characters
-- Examples

-- \set PROMPT1 '%n@%/ %# '
-- \set PROMPT2 '%# '
-- \set PROMPT3 ''

--------------------------------------------------------------------------------
-- psql prompt can be customized
\set PROMPT1 '%[%033[1;31m%]%[%033[32m%]psql:%[%033[36m%]//%n%[%033[34m%]@%[%033[36m%]my_ip:%>%[%033[33m%]/%/ %[%033[K%]%[%033[0m%]\n%[%033[1;33m%]%#%[%033[0m%] '
-- \set PROMPT1 '%[%033[1;33m%]%>%[%033[1;32m%] %n@%/%R%[%033[0m%]%# '
-- \set PROMPT2 :PROMPT1
\set PROMPT2 '[more] %R > '
\set PROMPT3 '>> '

-- ON_ERROR_ROLLBACK: whether or not to continue the transaction in case of
-- an error.
-- Values: on, interactive, off
\set ON_ERROR_ROLLBACK interactive

-- ON_ERROR_STOP: stop processing immediately after an error.
-- Values: on, off
\set ON_ERROR_STOP off

-- SHOW_CONTEXT: display context fields in messages from the server.
-- Values: never, errors, always
\set SHOW_CONTEXT errors

-- SINGLELINE: newline terminates an SQL command
-- Values: on, off
\set SINGLELINE off

-- SINGLESTEP: single step mode: to debug scripts
-- Values: on, off
\set SINGLESTEP off

-- VERBOSITY: for error reports
-- Values: default,verbose,terse
\set VERBOSITY default

-- border: number of borders and lines for the tables
-- Values: number
\pset border 1

-- columns: target width for wrapped format
-- Values: number
\pset columns 0

-- expanded: extended display
-- Values: auto, on, off
\x auto

-- fieldsep: field separator for unaligned output format.
-- Values: string
\pset fieldsep '|'

-- fieldsep_zero: set field separator to a zero byte.
--Values: no value.
--\pset fieldsep_zero

-- format: output format.
-- Values: unaligned, aligned, wrapped, html, asciidoc, latex, latex-longtable,
--         troff-ms
\pset format aligned

-- linestyle: border drawing style.
-- Values: ascii, old-ascii, unicode
\pset linestyle ascii

-- nulls: how to display null values.
-- Values: string
-- \pset null '[NULL]'
-- \pset null '¤'
\pset null '∅'

-- numericlocale: display local-specific character to separate digits.
-- values: on, off. Without values, will toggle.
\pset numericlocale off

-- pager: use of a pager program.
-- Values: on, off, always, name_of_pager. Without value, will toggle.
\pset pager always

-- Set default editor
\setenv EDITOR 'nvim'

-- pager_min_lines: is set to greater number than page height, pager will
-- not be called.
-- Values: number
\pset pager_min_lines 0

-- recordsep: line separator in unaligned output format.
-- Values: string
\pset recordsep '\n'

-- recordsep_zero: set the line separator in unaligned output format to
-- zero byte.
-- Values: no values.
--\pset recordsep_zero

-- tableattr: attributes in the table tag for HTML format.
-- Values: string. Without value, will unset attributes.
--\pset tableattr TODO

-- Missing LIMIT fetch count is set to 1000
\set FETCH_COUNT 1000

-- unicode_border_linestyle: border drawing style for unicode style.
-- Values: single, double.
\pset unicode_border_linestyle single

-- unicode_column_linestyle: column drawing style for unicode style.
-- Values: single, double.
\pset unicode_column_linestyle single

-- unicode_header_linestyle: header drawing style for unicode style.
-- Values: single, double.
\pset unicode_header_linestyle single

-- AUTOCOMMIT: whether or not to automatically commit commands upon completion.
-- Values: on, off
\set AUTOCOMMIT on

-- COMP_KEYWORD_CASE: choosing the letter cas for SQL keywords.
-- Values: lower,upper,preserve-lower,preserve-upper
\set COMP_KEYWORD_CASE preserve-upper

-- Get rid of duplicate sequences in the history
\set HISTCONTROL ignoredups
-- Set the command history file names for each host and database
\set HISTFILE ~/Document/psql/.psql_history-:HOST-:DBNAME
-- Set the number of commands to store in the command history
\set HISTSIZE 20000

-- Encoding
\encoding unicode

-- Set timing on and see how long query took
\timing

-- Server Settings
\set settings 'select name, setting,unit,context from pg_settings;'

-- Lock info
\set locks  'SELECT bl.pid AS blocked_pid, a.usename AS blocked_user, kl.pid AS blocking_pid, ka.usename AS blocking_user, a.query AS blocked_statement FROM pg_catalog.pg_locks bl JOIN pg_catalog.pg_stat_activity a ON bl.pid = a.pid JOIN pg_catalog.pg_locks kl JOIN pg_catalog.pg_stat_activity ka ON kl.pid = ka.pid ON bl.transactionid = kl.transactionid AND bl.pid != kl.pid WHERE NOT bl.granted;'

-- Server connections
\set conninfo 'select usename, count(*) from pg_stat_activity group by usename;'

-- Server activity
\set activity 'select datname, pid, usename, application_name,client_addr, client_hostname, client_port, query, state from pg_stat_activity;'

-- Waiting queires
\set waits 'SELECT pg_stat_activity.pid, pg_stat_activity.query, pg_stat_activity.waiting, now() - pg_stat_activity.query_start AS \"totaltime\", pg_stat_activity.backend_start FROM pg_stat_activity WHERE pg_stat_activity.query !~ \'%IDLE%\'::text AND pg_stat_activity.waiting = true;'

-- Database Size
\set dbsize 'SELECT datname, pg_size_pretty(pg_database_size(datname)) db_size FROM pg_database ORDER BY db_size;'

-- Tables Size
\set tablesize 'SELECT nspname || \'.\' || relname AS \"relation\", pg_size_pretty(pg_relation_size(C.oid)) AS "size" FROM pg_class C LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace) WHERE nspname NOT IN (\'pg_catalog\', \'information_schema\') ORDER BY pg_relation_size(C.oid) DESC LIMIT 40;'

-- Useless columns
\set uselesscol 'SELECT nspname, relname, attname, typname, (stanullfrac*100)::int AS null_percent, case when stadistinct >= 0 then stadistinct else abs(stadistinct)*reltuples end AS \"distinct\", case 1 when stakind1 then stavalues1 when stakind2 then stavalues2 end AS \"values\" FROM pg_class c JOIN pg_namespace ns ON (ns.oid=relnamespace) JOIN pg_attribute ON (c.oid=attrelid) JOIN pg_type t ON (t.oid=atttypid) JOIN pg_statistic ON (c.oid=starelid AND staattnum=attnum) WHERE nspname NOT LIKE E\'pg\\\\_%\' AND nspname != \'information_schema\' AND relkind=\'r\' AND NOT attisdropped AND attstattarget != 0 AND reltuples >= 100 AND stadistinct BETWEEN 0 AND 1 ORDER BY nspname, relname, attname;'

-- number of connected backends
\set backends 'SELECT datname, numbackends FROM pg_catalog.pg_stat_database;'

-- buffer cache hit ratio
\set buffer_cache_hit_ratio 'select datname, blks_hit::float/(blks_hit+blks_read) as hit_ratio from pg_stat_database where blks_read+blks_hit <> 0;'

-- kill transactions that have been "idle in transaction" for more than 10 minutes
\set kill_old_transactions 'select count(pg_terminate_backend(pid)) as nb_killed_proc from pg_stat_activity where query = \'<IDLE> in transaction\' and current_timestamp - query_start > \'10 min\';'

-- running queries
\set queries  'select current_timestamp - query_start as runtime,pid,datname,usename,query from pg_stat_activity where query != \'<IDLE>\' order by 1 desc; '

\set uptime 'select now() - pg_postmaster_start_time() AS uptime;'

-- Development queries:

\set sp 'SHOW search_path;'
\set ll '\\! ls -lart;'
